type Dictionary @dgraph(type: "DictionaryNode"){
    id: ID!
    name: String! @search @dgraph(pred: "dictionary")
}

type Strongs @dgraph(type: "StrongsNode"){
    id: ID!
    strongsNumber: Int! @search @dgraph(pred: "StrongsNumber")
    pronunciation: String @dgraph(pred: "pronunciation")
    lexeme: String @dgraph(pred: "lexeme")
    transliteration: String @dgraph(pred: "transliteration")
    definition: String @dgraph(pred: "definitions")
    strongsNumberExtended: String @dgraph(pred: "strongsNumberExtended")
    englishWord: String @dgraph(pred: "englishWord")
    presence: [Word] @hasInverse(field, strongsLink)
}

type TranslationWord @dgraph(type: "TWNode"){
    id: ID!
    translationWord: String! @search @dgraph(pred: "translationWord")
    slNo: Int @dgraph(pred: "slNo")
    twType: String @search @dgraph(pred: "twType")
    description: String @dgraph(pred: "description")
    presence: [Word] @hasInverse(field, twLink)
}

type Bible @dgraph(type: "BibleNode"){
    id: ID!
    bible: String! @search @dgraph(pred: "bible")
    language: String @dgraph(pred: "language")
    version: String @dgraph(pred: "version")
    contains: [Book] @hasinverse(field, belongsTo)
    excludedVerses: [VersificationVerse] @dgraph(pred: "excludedVerse")
}

type Book @dgraph(type: "BookNode"){
    id: ID!
    book: String! @search @dgraph(pred: "book")
    bookNumber: Int! @search @dgraph(pred: "bookNumber")
    belongsTo: Bible @hasInverse(field, contains) @dgraph(pred: "belongsTo")
    contains: [Chapter] @hasInverse(field, belongsTo)
}

type Chapter @dgraph(type: "ChapterNode"){
    id: ID!
    chapter: Int! @search @dgraph(pred: "chapter")
    belongsTo: Book @hasInverse(field, contains) @dgraph(pred: "belongsTo")
    contains: [Verse] @hasInverse(field, belongsTo) 
}

type Verse @dgraph(type: "VerseNode"){
    id: ID!
    verse: Int! @search @dgraph(pred: "verse")
    verseText: String @dgraph(pred: "verseText")
    refString: String @search @dgraph(pred: "refString")
    belongsTo: Chapter @hasInverse(field, contains) @dgraph(pred: "belongsTo")
    contains: [Word] @hasInverse(field, belongsTo) 
    verseMapping: VersificationVerse @dgraph(pred: "verseMapping") @hasInverse(field, mappedVerses)
}

type Word @dgraph(type: "WordNode"){
    id: ID!
    word: String @search @dgraph(pred: "word")
    position: Int! @search @dgraph(pred: "position")
    belongsTo: Chapter @hasInverse(field, contains) @dgraph(pred: "belongsTo")
    alignsTo: Word @hasInverse(field, alignsTo) @dgraph(pred: "alignsTo")
    strongsLink: Strongs @hasInverse(field, presence) @dgraph(pred: "strongsLink")
    twLink: Strongs @hasInverse(field, presence) @dgraph(pred: "twLink")
    nameLink: Strongs @hasInverse(field, presence) @dgraph(pred: "nameLink")
}

type Name @dgraph(type: "NameNode"){
    id: ID!
    name: String! @search @dgraph(pred: "name")
    externalUid: String! @search @dgraph(pred: "externalUid")
    personDescription: String @dgraph(pred: "PersonDescription")
    description: String @dgraph(pred: "description")
    itemDescription: String @dgraph(pred: "itemDescription")
    genderLabel: String @dgraph(pred: "GenderLabel")
    gender: String @dgraph(pred: "gender")
    birthdate: String @dgraph(pred: "birthdate")
    deathdate: String @dgraph(pred: "deathdate")
    birthPlaceLabel: String @dgraph(pred: "birthPlaceLabel")
    deathPlaceLabel: String @dgraph(pred: "deathPlaceLabel")
    father: Name @dgraph(pred: "father") @hasInverse(field, child)
    mother: Name @dgraph(pred: "mother") @hasInverse(field, child)
    spouse1: Name @dgraph(pred: "spouse") @hasInverse(field, spouse2)
    spouse2: Name @hasInverse(field, spouse1)
    child1: Name @hasInverse(field, father)
    child2: Name @hasInverse(field, mother)
    presence: [Word] @hasInverse(field, nameLink)
    belongsTo: Dictionary @hasInverse(field, contains) @dgraph(pred: "belongsTo")
    sameAs: [Name] @dgraph(pred: "sameAs")
}

type Versification @dgraph(type:"VersificationNode"){
    id: ID!
    versification: String! @dgraph(pred: "versification")
    contains: [VersificationBook] @hasInverse(field, belongsTo) 
}

type VersificationBook @dgraph(type: "VersificationBookNode"){
    id: ID!
    bookCode: String! @dgraph(pred: "bookcode")
    belongsTo: Versification @hasInverse(field, contains) @dgraph(pred: "belongsTo")
    contains: [VersificationChapter] @hasInverse(field, belongsTo) 
}

type VersificationChapter @dgraph(type: "VersificationChapterNode"){
    id: ID!
    chapter: Int! @dgraph(pred: "chapter")
    belongsTo: VersificationBook @hasInverse(field, contains) @dgraph(pred: "belongsTo")
    contains: [VersificationVerse] @hasInverse(field, belongsTo) 
}

type VersificationVerse @dgraph(type: "VersificationVerseNode"){
    id: ID!
    verseNumber: Int! @dgraph(pred:, "verseNumber")
    belongsTo: Versification @hasInverse(field, contains) @dgraph(pred: "belongsTo")
    mappedVerses: [Verse] @hasInverse(field, verseMapping)
}